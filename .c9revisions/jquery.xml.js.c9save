{"ts":1344970031905,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * xml\n * https://github.com/stsvilik/xml-to-json\n * @author Sam Tsvilik\n *\n * Copyright (c) 2012 Sam Tsvilik\n * Licensed under the MIT, GPL licenses.\n */\n\n(function(window, $, undef) {\n\n  var NULL = null,\n    FALSE = !1,\n    TRUE = !0,\n    NODE_TYPES = {\n      Element: 1,\n      Attribute: 2,\n      Text: 3,\n      CDATA: 4,\n      Root: 9,\n      Fragment: 11\n    },\n    XMLConverter, module;\n\n  /**\n   * Parses XML string and returns an XMLDocument object\n   * @param  {String} strXML XML Formatted string\n   * @return {XMLDocument|XMLElement}\n   */\n\n  function parseXMLString(strXML) {\n    var xmlDoc = NULL,\n      out = NULL,\n      isParsed = TRUE;\n    try {\n      xmlDoc = (\"DOMParser\" in window) ? new DOMParser() : new ActiveXObject(\"MSXML2.DOMDocument\");\n      xmlDoc.async = FALSE;\n    } catch (e) {\n      throw new Error(\"XML Parser could not be instantiated\");\n    }\n\n    if (\"parseFromString\" in xmlDoc) {\n      out = xmlDoc.parseFromString(strXML, \"text/xml\");\n      isParsed = (out.documentElement.tagName !== \"parsererror\");\n    } else { //If old IE\n      isParsed = xmlDoc.loadXML(strXML);\n      out = (isParsed) ? xmlDoc : FALSE;\n    }\n    if (!isParsed) {\n      throw new Error(\"Error parsing XML string\");\n    }\n    return out;\n  }\n\n  XMLConverter = {\n    isXML: function(o) {\n      return (typeof(o) === \"object\" && o.nodeType !== undef);\n    },\n    getRoot: function(doc) {\n      return (doc.nodeType === NODE_TYPES.Root) ? doc.documentElement : (doc.nodeType === NODE_TYPES.Fragment) ? doc.firstChild : doc;\n    },\n    /**\n     * Begins the conversion process. Will automatically convert XML string into XMLDocument\n     * @param  {String|XMLDocument|XMLNode|XMLElement} xml XML you want to convert to JSON\n     * @return {JSON} JSON object representing the XML data tree\n     */\n    convert: function(xml) {\n      var out = {},\n        xdoc = typeof(xml) === \"string\" ? parseXMLString(xml) : this.isXML(xml) ? xml : undef,\n        root;\n      if (!xdoc) {\n        throw new Error(\"Unable to parse XML\");\n      }\n      //If xdoc is just a text or CDATA return value\n      if (xdoc.nodeType === NODE_TYPES.Text || xdoc.nodeType === NODE_TYPES.CDATA) {\n        return xdoc.nodeValue;\n      }\n      //Extract root node\n      root = this.getRoot(xdoc);\n      //Create first root node\n      out[root.nodeName] = {};\n      //Start assembling the JSON tree (recursive)\n      this.process(root, out[root.nodeName]);\n      //Parse JSON string and attempt to return it as an Object\n      return out;\n    },\n    /**\n     * Recursive xmlNode processor. It determines the node type and processes it accordingly.\n     * @param  {XMLNode} node Any XML node\n     * @param  {Object} buff Buffer object which will contain the JSON equivalent properties\n     */\n    process: function(node, buff) {\n      var child, attr, name, att_name, value, i, j, tmp, iMax, jMax;\n      if (node.hasChildNodes()) {\n        iMax = node.childNodes.length;\n        for (i = 0; i < iMax; i++) {\n          child = node.childNodes[i];\n          //Check nodeType of each child node\n          switch (child.nodeType) {\n          case NODE_TYPES.Text:\n            //If parent node has both CDATA and Text nodes, we just concatinate them together\n            buff.Text = buff.Text ? buff.Text + $.trim(child.nodeValue) : $.trim(child.nodeValue);\n            break;\n          case NODE_TYPES.CDATA:\n            //If parent node has both CDATA and Text nodes, we just concatinate them together\n            value = child[child.text ? \"text\" : \"nodeValue\"]; //IE attributes support\n            buff.Text = buff.Text ? buff.Text + value : value;\n            break;\n          case NODE_TYPES.Element:\n            name = child.nodeName;\n            tmp = {};\n            //Populate attributes\n            jMax = child.attributes.length;\n            if (jMax) {\n              for (j = jMax - 1; j >= 0; j--) {\n                attr = child.attributes[j];\n                att_name = $.trim(attr.name);\n                value = attr.value;\n                tmp[\"@\" + att_name] = value;\n              }\n            }\n            //Node name already exists in the buffer and it's a NodeSet\n            if (name in buff) {\n              if (buff[name].length) {\n                this.process(child, tmp);\n                buff[name].push(tmp);\n              } else { //If node exists in the parent as a single entity\n                this.process(child, tmp);\n                buff[name] = [buff[name], tmp];\n              }\n            } else { //If node does not exist in the parent\n              this.process(child, tmp);\n              buff[name] = tmp;\n            }\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Convert XML string or document to JSON\n   * @param  {String|XMLDocument|XMLElement|XMLNode} xml Any type of XML\n   * @return {Object}     JSON equivalent of the XML source\n   */\n  $.xmlToJSON = function(xml) {\n    return XMLConverter.convert(xml);\n  };\n  \n}(window, jQuery));"]],"start1":0,"start2":0,"length1":0,"length2":4978}]],"length":4978}
{"contributors":[],"silentsave":false,"ts":1351973987353,"patch":[[{"diffs":[[0,";\n      "],[1,"  "],[0,"if"],[-1," "],[0,"(node.ha"]],"start1":2869,"start2":2869,"length1":19,"length2":20},{"diffs":[[0,"dNodes()) {\n"],[1,"    "],[0,"        iMax"]],"start1":2894,"start2":2894,"length1":24,"length2":28},{"diffs":[[0,"        "],[1," "],[1,"   "],[0,"for"],[-1," "],[0,"(i = 0; "]],"start1":2949,"start2":2949,"length1":20,"length2":23},{"diffs":[[0,"        "],[1,"    "],[1,"  "],[0,"child = "]],"start1":2991,"start2":2991,"length1":16,"length2":22},{"diffs":[[0,"des[i];\n"],[1,"      "],[0,"        "]],"start1":3025,"start2":3025,"length1":16,"length2":22},{"diffs":[[0,"    "],[1,"      "],[0,"switch"],[-1," "],[0,"(chi"]],"start1":3091,"start2":3091,"length1":15,"length2":20},{"diffs":[[0,"pe) {\n          "],[1," "],[1,"     "],[0,"case NODE_TYPES."]],"start1":3120,"start2":3120,"length1":32,"length2":38},{"diffs":[[0,"S.Text:\n"],[1,"        "],[0,"        "]],"start1":3156,"start2":3156,"length1":16,"length2":24},{"diffs":[[0,"her\n            "],[1,"   "],[1,"     "],[0,"buff.Text = buff"]],"start1":3262,"start2":3262,"length1":32,"length2":40},{"diffs":[[0,"e);\n            "],[1,"        "],[0,"break;\n         "]],"start1":3369,"start2":3369,"length1":32,"length2":40},{"diffs":[[0,"reak;\n          "],[1,"  "],[1,"    "],[0,"case NODE_TYPES."]],"start1":3394,"start2":3394,"length1":32,"length2":38},{"diffs":[[0,".CDATA:\n"],[1,"        "],[0,"        "]],"start1":3431,"start2":3431,"length1":16,"length2":24},{"diffs":[[0,"her\n            "],[1,"    "],[1,"    "],[0,"value = child[ch"]],"start1":3537,"start2":3537,"length1":32,"length2":40},{"diffs":[[0,"ort\n            "],[1,"        "],[0,"buff.Text = buff"]],"start1":3631,"start2":3631,"length1":32,"length2":40},{"diffs":[[0,"ue;\n            "],[1,"   "],[1,"     "],[0,"break;\n"],[1,"      "],[0,"          case N"]],"start1":3702,"start2":3702,"length1":39,"length2":53},{"diffs":[[0,"    "],[-1,"name = child.nodeName;\n            tmp = {};\n            //Populate attributes\n            jMax = child.attributes.length;\n            if (jMax) {\n              for (j = jMax - 1; j >= 0; j--) {\n                attr = child.attributes[j];\n                att_name = $.trim(attr.name);\n                value = attr.value;\n                tmp[\"@\" + att_name] = value;\n              }\n            }\n"],[1,"        name = child.nodeName;\n                    tmp = {};\n             "],[0,"       "],[-1,"     "],[0,"//No"]],"start1":3782,"start2":3782,"length1":416,"length2":89},{"diffs":[[0,"        "],[1,"        "],[0,"if"],[-1," "],[0,"(name in"]],"start1":3931,"start2":3931,"length1":19,"length2":26},{"diffs":[[0,"        "],[1,"  "],[1,"        "],[0,"if"],[-1," "],[0,"(buff[na"]],"start1":3972,"start2":3972,"length1":19,"length2":28},{"diffs":[[0,"                "],[1,"      "],[1,"      "],[0,"this.process(chi"]],"start1":4014,"start2":4014,"length1":32,"length2":44},{"diffs":[[0,"                "],[1,"          "],[1,"  "],[0,"buff[name].push("]],"start1":4068,"start2":4068,"length1":32,"length2":44},{"diffs":[[0,".push(tmp);\n"],[1,"          "],[0,"            "]],"start1":4106,"start2":4106,"length1":24,"length2":34},{"diffs":[[0,"                "],[1,"   "],[1,"         "],[0,"this.process(chi"]],"start1":4201,"start2":4201,"length1":32,"length2":44},{"diffs":[[0,"ss(child, tmp);\n"],[1,"            "],[0,"                "]],"start1":4239,"start2":4239,"length1":32,"length2":44},{"diffs":[[0,";\n              "],[1,"          "],[0,"}\n            } "]],"start1":4313,"start2":4313,"length1":32,"length2":42},{"diffs":[[0,"  }\n            "],[1," "],[1,"       "],[0,"} else { //If no"]],"start1":4337,"start2":4337,"length1":32,"length2":40},{"diffs":[[0,"t\n              "],[1,"         "],[1," "],[0,"this.process(chi"]],"start1":4407,"start2":4407,"length1":32,"length2":42},{"diffs":[[0,";\n              "],[1,"          "],[0,"buff[name] = tmp"]],"start1":4457,"start2":4457,"length1":32,"length2":42},{"diffs":[[0,"mp;\n            "],[1,"    "],[-1,"}\n"],[1,"    }\n        "],[0,"            brea"]],"start1":4497,"start2":4497,"length1":34,"length2":50},{"diffs":[[0,"reak;\n          "],[1,"    "],[1,"  "],[0,"}\n        }\n    "]],"start1":4544,"start2":4544,"length1":32,"length2":38},{"diffs":[[0,"  }\n        "],[-1,"}\n"],[1,"    }\n        }\n        //Populate attributes\n        if(node.attributes.length) {\n            jMax = node.attributes.length;\n            if(jMax) {\n                for(j = jMax - 1; j >= 0; j--) {\n                    attr = node.attributes[j];\n                    att_name = $.trim(attr.name);\n                    value = attr.value;\n                    buff[\"@\" + att_name] = value;\n                }\n            }\n  "],[0,"      }\n    "]],"start1":4564,"start2":4564,"length1":26,"length2":443}]],"length":5301,"saved":false}
{"ts":1351974439168,"patch":[[{"diffs":[[0,"        "],[-1,"jMax"],[1,"for(j"],[0," = node."]],"start1":4663,"start2":4663,"length1":20,"length2":21},{"diffs":[[0,"ngth"],[-1,";\n            if(jMax) {\n                for(j = jMax"],[0," - 1"]],"start1":4697,"start2":4697,"length1":61,"length2":8},{"diffs":[[0,"= 0; j--) {\n"],[-1,"    "],[0,"            "]],"start1":4710,"start2":4710,"length1":28,"length2":24},{"diffs":[[0,"        "],[-1," "],[-1,"   "],[0,"att_name"]],"start1":4773,"start2":4773,"length1":20,"length2":16},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"value = attr.val"]],"start1":4811,"start2":4811,"length1":36,"length2":32},{"diffs":[[0,"attr.value;\n"],[-1,"    "],[0,"            "]],"start1":4835,"start2":4835,"length1":28,"length2":24},{"diffs":[[0," value;\n"],[-1,"                }\n"],[0,"        "]],"start1":4885,"start2":4885,"length1":34,"length2":16}]],"length":5215,"saved":false}
{"ts":1351974447720,"patch":[[{"diffs":[[0,"iMax"],[-1,", jMax"],[0,";\n  "]],"start1":2859,"start2":2859,"length1":14,"length2":8}]],"length":5209,"saved":false}
{"ts":1351974567780,"patch":[[{"diffs":[[0,"ml) {\n      "],[1,"  "],[0,"var out = {}"]],"start1":1826,"start2":1826,"length1":24,"length2":26},{"diffs":[[0,"t = {},\n"],[-1,""],[0,"        "]],"start1":1846,"start2":1846,"length1":16,"length2":16},{"diffs":[[0,"root;\n      "],[1,"  "],[0,"if (!xdoc) {"]],"start1":1957,"start2":1957,"length1":24,"length2":26},{"diffs":[[0,"f (!xdoc) {\n"],[1,"    "],[0,"        thro"]],"start1":1972,"start2":1972,"length1":24,"length2":28},{"diffs":[[0,";\n      "],[1,"  "],[0,"}\n      "],[1," "],[1," "],[0,"//If xdo"]],"start1":2034,"start2":2034,"length1":24,"length2":28},{"diffs":[[0,"n value\n"],[1,"  "],[0,"      if"]],"start1":2093,"start2":2093,"length1":16,"length2":18},{"diffs":[[0,") {\n        "],[1,"    "],[0,"return xdoc."]],"start1":2184,"start2":2184,"length1":24,"length2":28},{"diffs":[[0,"alue;\n      "],[1," "],[1," "],[0,"}\n"],[1,"  "],[0,"      //Extr"]],"start1":2217,"start2":2217,"length1":26,"length2":30},{"diffs":[[0,"t root node\n"],[1,"  "],[0,"      root ="]],"start1":2249,"start2":2249,"length1":24,"length2":26},{"diffs":[[0,";\n      "],[1,"  "],[0,"//Create"]],"start1":2294,"start2":2294,"length1":16,"length2":18},{"diffs":[[0,"t root node\n"],[1,"  "],[0,"      out[ro"]],"start1":2317,"start2":2317,"length1":24,"length2":26},{"diffs":[[0,";\n      "],[1,"  "],[0,"//Start "]],"start1":2360,"start2":2360,"length1":16,"length2":18},{"diffs":[[0,"ursive)\n"],[1,"  "],[0,"      th"]],"start1":2407,"start2":2407,"length1":16,"length2":18},{"diffs":[[0,";\n      "],[1,"  "],[0,"//Parse "]],"start1":2461,"start2":2461,"length1":16,"length2":18},{"diffs":[[0," Object\n"],[1,"  "],[0,"      re"]],"start1":2521,"start2":2521,"length1":16,"length2":18}]],"length":5245,"saved":false}
{"ts":1351974617425,"patch":[[{"diffs":[[0,"ut = {},"],[-1,"\n       "],[0," xdoc = "]],"start1":1845,"start2":1845,"length1":24,"length2":16},{"diffs":[[0,": undef,"],[-1,"\n       "],[0," root;\n "]],"start1":1932,"start2":1932,"length1":24,"length2":16}]],"length":5229,"saved":false}
{"ts":1351974630539,"patch":[[{"diffs":[[0,"tion(o) {\n      "],[1,"  "],[0,"return (typeof(o"]],"start1":1287,"start2":1287,"length1":32,"length2":34},{"diffs":[[0,"tion(doc) {\n"],[1,"  "],[0,"      return"]],"start1":1386,"start2":1386,"length1":24,"length2":26}]],"length":5233,"saved":false}
